import geomdl.fitting
import numpy as np
import geomdl
import os
import open3d as o3d
import scipy
import matplotlib as plt
import scipy.interpolate
import math


path_ = os.path.join(os.getcwd(), "./output_new/2024-05-27_08-22-28-505194_line_2.ply")
path_1 = os.path.join(os.getcwd(), "./output_new/2024-05-27_07-48-47-198669_line_2.ply")
pcd = o3d.io.read_point_cloud(path_1)
pcd_np = (np.asarray(pcd.points))

tree = dict()

def find_distance(start_node, index):
    global adj_matr

    if np.sum(adj_matr[index]) != 0.000:
        return
    
    for i in range(np.shape(pcd_np)[0]):
        distance = math.dist(start_node,pcd_np[i])
        #print(distance)
        if distance < 0.25 and i != index:
            adj_matr[index, i] = distance
            find_distance(pcd_np[i], i)
            

path_colon = os.path.join(os.getcwd(), "data/Colon.ply")
pcd_colon = o3d.io.read_point_cloud(path_colon)
adj_matr = np.zeros([np.shape(pcd_np)[0], np.shape(pcd_np)[0]])

pcd_colon.paint_uniform_color([1,1,0])

find_distance(pcd_np[0], 0)
min = np.argmax(adj_matr[0])

dist_matrix, predecessor_array = scipy.sparse.csgraph.dijkstra(adj_matr,indices = 0, directed=False,unweighted=False, return_predecessors=True)
dist_matrix[dist_matrix==np.inf] = -1
max = np.argmax(dist_matrix)
index = max
path = [max]
while predecessor_array[index] != 0:
    index = predecessor_array[index]
    path.append(index)


print(path)


col = np.zeros([np.shape(pcd_np)[0], 3])
"""col = np.where(distance_all[:] < 400, [0,1,0], [0,0,0])
col = np.where(distance_all[:] < 300, [0,1,0.2], col)
col = np.where(distance_all[:] < 200, [0,1,0.5], col)"""
#ol = np.where(distance_all[:] ==0, [0,1,0.7], [0,0,0])
x = pcd.colors
print(type(x))
for i in path:
    print(path)
    col[i] = [1,0 ,0]
y = np.asarray(x)
print(type(y))
print(type(col))
col[max] = [1,0 ,0]
col[0] = [0,0,1]
#col[1:50] = [0,1,1]
#col[1:250] = [0,0,0]
#pcd.points = o3d.utility.Vector3dVector(pcd_cont)
pcd.colors = o3d.utility.Vector3dVector(col)

o3d.visualization.draw_geometries([pcd_colon, pcd],

       mesh_show_wireframe = True,

    mesh_show_back_face = True,
    point_show_normal = True)
